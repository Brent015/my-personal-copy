/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as DashboardIndexImport } from './routes/dashboard.index'
import { Route as DashboardWalletImport } from './routes/dashboard.wallet'
import { Route as DashboardSettingsImport } from './routes/dashboard.settings'
import { Route as DashboardEventsImport } from './routes/dashboard.events'
import { Route as DashboardEventsIndexImport } from './routes/dashboard.events.index'
import { Route as DashboardEventsSchedulesImport } from './routes/dashboard.events.schedules'
import { Route as DashboardEventsEventIdIndexImport } from './routes/dashboard/events/$eventId/index'
import { Route as DashboardEventsEventIdSchedulesImport } from './routes/dashboard/events/$eventId/schedules'
import { Route as DashboardEventsEventIdEditImport } from './routes/dashboard/events/$eventId/edit'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const DashboardCreateLazyImport = createFileRoute('/dashboard/create')()

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DashboardIndexRoute = DashboardIndexImport.update({
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardCreateLazyRoute = DashboardCreateLazyImport.update({
  path: '/create',
  getParentRoute: () => DashboardRoute,
} as any).lazy(() =>
  import('./routes/dashboard.create.lazy').then((d) => d.Route),
)

const DashboardWalletRoute = DashboardWalletImport.update({
  path: '/wallet',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardSettingsRoute = DashboardSettingsImport.update({
  path: '/settings',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardEventsRoute = DashboardEventsImport.update({
  path: '/events',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardEventsIndexRoute = DashboardEventsIndexImport.update({
  path: '/',
  getParentRoute: () => DashboardEventsRoute,
} as any)

const DashboardEventsSchedulesRoute = DashboardEventsSchedulesImport.update({
  path: '/schedules',
  getParentRoute: () => DashboardEventsRoute,
} as any)

const DashboardEventsEventIdIndexRoute =
  DashboardEventsEventIdIndexImport.update({
    path: '/$eventId/',
    getParentRoute: () => DashboardEventsRoute,
  } as any)

const DashboardEventsEventIdSchedulesRoute =
  DashboardEventsEventIdSchedulesImport.update({
    path: '/$eventId/schedules',
    getParentRoute: () => DashboardEventsRoute,
  } as any)

const DashboardEventsEventIdEditRoute = DashboardEventsEventIdEditImport.update(
  {
    path: '/$eventId/edit',
    getParentRoute: () => DashboardEventsRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/events': {
      id: '/dashboard/events'
      path: '/events'
      fullPath: '/dashboard/events'
      preLoaderRoute: typeof DashboardEventsImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/wallet': {
      id: '/dashboard/wallet'
      path: '/wallet'
      fullPath: '/dashboard/wallet'
      preLoaderRoute: typeof DashboardWalletImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/create': {
      id: '/dashboard/create'
      path: '/create'
      fullPath: '/dashboard/create'
      preLoaderRoute: typeof DashboardCreateLazyImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/events/schedules': {
      id: '/dashboard/events/schedules'
      path: '/schedules'
      fullPath: '/dashboard/events/schedules'
      preLoaderRoute: typeof DashboardEventsSchedulesImport
      parentRoute: typeof DashboardEventsImport
    }
    '/dashboard/events/': {
      id: '/dashboard/events/'
      path: '/'
      fullPath: '/dashboard/events/'
      preLoaderRoute: typeof DashboardEventsIndexImport
      parentRoute: typeof DashboardEventsImport
    }
    '/dashboard/events/$eventId/edit': {
      id: '/dashboard/events/$eventId/edit'
      path: '/$eventId/edit'
      fullPath: '/dashboard/events/$eventId/edit'
      preLoaderRoute: typeof DashboardEventsEventIdEditImport
      parentRoute: typeof DashboardEventsImport
    }
    '/dashboard/events/$eventId/schedules': {
      id: '/dashboard/events/$eventId/schedules'
      path: '/$eventId/schedules'
      fullPath: '/dashboard/events/$eventId/schedules'
      preLoaderRoute: typeof DashboardEventsEventIdSchedulesImport
      parentRoute: typeof DashboardEventsImport
    }
    '/dashboard/events/$eventId/': {
      id: '/dashboard/events/$eventId/'
      path: '/$eventId'
      fullPath: '/dashboard/events/$eventId'
      preLoaderRoute: typeof DashboardEventsEventIdIndexImport
      parentRoute: typeof DashboardEventsImport
    }
  }
}

// Create and export the route tree

interface DashboardEventsRouteChildren {
  DashboardEventsSchedulesRoute: typeof DashboardEventsSchedulesRoute
  DashboardEventsIndexRoute: typeof DashboardEventsIndexRoute
  DashboardEventsEventIdEditRoute: typeof DashboardEventsEventIdEditRoute
  DashboardEventsEventIdSchedulesRoute: typeof DashboardEventsEventIdSchedulesRoute
  DashboardEventsEventIdIndexRoute: typeof DashboardEventsEventIdIndexRoute
}

const DashboardEventsRouteChildren: DashboardEventsRouteChildren = {
  DashboardEventsSchedulesRoute: DashboardEventsSchedulesRoute,
  DashboardEventsIndexRoute: DashboardEventsIndexRoute,
  DashboardEventsEventIdEditRoute: DashboardEventsEventIdEditRoute,
  DashboardEventsEventIdSchedulesRoute: DashboardEventsEventIdSchedulesRoute,
  DashboardEventsEventIdIndexRoute: DashboardEventsEventIdIndexRoute,
}

const DashboardEventsRouteWithChildren = DashboardEventsRoute._addFileChildren(
  DashboardEventsRouteChildren,
)

interface DashboardRouteChildren {
  DashboardEventsRoute: typeof DashboardEventsRouteWithChildren
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardWalletRoute: typeof DashboardWalletRoute
  DashboardCreateLazyRoute: typeof DashboardCreateLazyRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardEventsRoute: DashboardEventsRouteWithChildren,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardWalletRoute: DashboardWalletRoute,
  DashboardCreateLazyRoute: DashboardCreateLazyRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/events': typeof DashboardEventsRouteWithChildren
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/wallet': typeof DashboardWalletRoute
  '/dashboard/create': typeof DashboardCreateLazyRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/events/schedules': typeof DashboardEventsSchedulesRoute
  '/dashboard/events/': typeof DashboardEventsIndexRoute
  '/dashboard/events/$eventId/edit': typeof DashboardEventsEventIdEditRoute
  '/dashboard/events/$eventId/schedules': typeof DashboardEventsEventIdSchedulesRoute
  '/dashboard/events/$eventId': typeof DashboardEventsEventIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/wallet': typeof DashboardWalletRoute
  '/dashboard/create': typeof DashboardCreateLazyRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/events/schedules': typeof DashboardEventsSchedulesRoute
  '/dashboard/events': typeof DashboardEventsIndexRoute
  '/dashboard/events/$eventId/edit': typeof DashboardEventsEventIdEditRoute
  '/dashboard/events/$eventId/schedules': typeof DashboardEventsEventIdSchedulesRoute
  '/dashboard/events/$eventId': typeof DashboardEventsEventIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/events': typeof DashboardEventsRouteWithChildren
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/wallet': typeof DashboardWalletRoute
  '/dashboard/create': typeof DashboardCreateLazyRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/events/schedules': typeof DashboardEventsSchedulesRoute
  '/dashboard/events/': typeof DashboardEventsIndexRoute
  '/dashboard/events/$eventId/edit': typeof DashboardEventsEventIdEditRoute
  '/dashboard/events/$eventId/schedules': typeof DashboardEventsEventIdSchedulesRoute
  '/dashboard/events/$eventId/': typeof DashboardEventsEventIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/events'
    | '/dashboard/settings'
    | '/dashboard/wallet'
    | '/dashboard/create'
    | '/dashboard/'
    | '/dashboard/events/schedules'
    | '/dashboard/events/'
    | '/dashboard/events/$eventId/edit'
    | '/dashboard/events/$eventId/schedules'
    | '/dashboard/events/$eventId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard/settings'
    | '/dashboard/wallet'
    | '/dashboard/create'
    | '/dashboard'
    | '/dashboard/events/schedules'
    | '/dashboard/events'
    | '/dashboard/events/$eventId/edit'
    | '/dashboard/events/$eventId/schedules'
    | '/dashboard/events/$eventId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/events'
    | '/dashboard/settings'
    | '/dashboard/wallet'
    | '/dashboard/create'
    | '/dashboard/'
    | '/dashboard/events/schedules'
    | '/dashboard/events/'
    | '/dashboard/events/$eventId/edit'
    | '/dashboard/events/$eventId/schedules'
    | '/dashboard/events/$eventId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DashboardRoute: typeof DashboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DashboardRoute: DashboardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/events",
        "/dashboard/settings",
        "/dashboard/wallet",
        "/dashboard/create",
        "/dashboard/"
      ]
    },
    "/dashboard/events": {
      "filePath": "dashboard.events.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/events/schedules",
        "/dashboard/events/",
        "/dashboard/events/$eventId/edit",
        "/dashboard/events/$eventId/schedules",
        "/dashboard/events/$eventId/"
      ]
    },
    "/dashboard/settings": {
      "filePath": "dashboard.settings.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/wallet": {
      "filePath": "dashboard.wallet.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/create": {
      "filePath": "dashboard.create.lazy.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/": {
      "filePath": "dashboard.index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/events/schedules": {
      "filePath": "dashboard.events.schedules.tsx",
      "parent": "/dashboard/events"
    },
    "/dashboard/events/": {
      "filePath": "dashboard.events.index.tsx",
      "parent": "/dashboard/events"
    },
    "/dashboard/events/$eventId/edit": {
      "filePath": "dashboard/events/$eventId/edit.tsx",
      "parent": "/dashboard/events"
    },
    "/dashboard/events/$eventId/schedules": {
      "filePath": "dashboard/events/$eventId/schedules.tsx",
      "parent": "/dashboard/events"
    },
    "/dashboard/events/$eventId/": {
      "filePath": "dashboard/events/$eventId/index.tsx",
      "parent": "/dashboard/events"
    }
  }
}
ROUTE_MANIFEST_END */
